import java.io.*;
import java.util.*;

public class Main {
	static int [][] resgraph;
	static int [] vertex;
	static int minedge;
	static ArrayList <String> sizes=new ArrayList<String>();
	public static void main (String [] args){
		Scanner input = new Scanner (System.in);
		sizes.add("XXL");sizes.add("XL");sizes.add("L");sizes.add("M");sizes.add("S");sizes.add("XS");
		int iterations = input.nextInt();
		for(int i =0;i<iterations;i++){
			int numshirt = input.nextInt();
			int volunteers = input.nextInt();
	//		System.out.println(numshirt);
	//		System.out.println(volunteers);
			
			resgraph = new int [6+volunteers+2][6+volunteers+2];
			vertex=new int[6+volunteers+2];
			for (int j=1;j<=6;j++){
				resgraph[0][j]=numshirt/6;
			}
			
			input.nextLine();
			for (int j=7;j<7+volunteers;j++){
				String [] data = input.nextLine().split(" ");
		//		System.out.println(data[0] + " "+ data[1]);
				resgraph[sizes.indexOf(data[0])+1][j]=1;
				resgraph[sizes.indexOf(data[1])+1][j]=1;
				resgraph[j][resgraph.length-1]=1;
			}
			int mf = maxflow();
		//	System.out.println("MF: "+mf);
			if (mf==volunteers){
				System.out.println("YES");
			}
			else{
				System.out.println("NO");
			}
			//input.nextLine();
		}
	}
	static int maxflow (){
		int maxf=0;
		minedge=0;
		Queue <Integer> q = new LinkedList<Integer>();
		int []distance=new int[resgraph.length];
		Arrays.fill(distance, -1);
		distance[0]=0;
		q.add(0);
		Arrays.fill(vertex, -1);
		while(!q.isEmpty()){
			int currvertex = q.remove();
	//		System.out.println("Current Vertex _______" +currvertex);
			if(currvertex==resgraph.length-1){
	//			System.out.println("BREAK: BFS complete");
				break;
			}
			for (int i=0;i<resgraph.length;i++){
				
				if (resgraph[currvertex][i]>0&&distance[i]==-1){
	//				System.out.println("DFDAPOOP");
					distance[i]=distance[currvertex]+resgraph[currvertex][i];
	//				System.out.println("DISTANCE! "+i+" "+distance[i]);
					q.add(i);
					vertex[i]=currvertex;
				}
			}
		}
		augment(resgraph.length-1, 100000000);
		//System.out.println("***"+minedge);
		if (minedge==0){
			return maxf;
		}
		else{
			return maxf+minedge+maxflow();
		}
	}
	static void augment(int v, int min){
		if(v==0){
			minedge=min;
			return;
		}
		else if (vertex[v]!=-1){
			augment(vertex[v],Math.min(resgraph[vertex[v]][v],min));
			resgraph[vertex[v]][v]-=minedge;
			resgraph[v][vertex[v]]+=minedge;
		}
	}
}
