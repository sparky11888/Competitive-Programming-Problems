import java.io.*;
import java.util.*;

public class Main {
	static int casnum=1;
	static double [] prob;
	static double [] probbuying;
	static ArrayList<Double>probseq;
	static int nfriends;
	static int rbought;
	static double [] factorial=new double[22];
	static HashSet<String> possibilities;
	public static void main (String[] args){
		Scanner input=new Scanner (System.in);

		while(input.hasNextInt()){
			
			nfriends = input.nextInt();
			rbought = input.nextInt();
			if (nfriends==0&&rbought==0)
				break;
			prob = new double[nfriends];
			probbuying = new double[nfriends];
			possibilities=new HashSet<String>();
			probseq=new ArrayList<Double>();
			for(int i =0;i<nfriends;i++){
				prob[i]=input.nextDouble();
			}
			System.out.println("Case "+casnum+":");
			process();
			
		
			casnum++;
		}
	}

	static void process(){
		possibilities=perm(nfriends,rbought);
		//System.out.println("Combos for: "+nfriends+" "+rbought);
		int count=0;
		double denom=0;
		for (String s:possibilities){
			double prob = probability(s);
		//	System.out.println(s+" "+ prob);
			denom+=prob;
			count++;
		}
		for (double d: probbuying){
			double answer = d/denom;
		//	System.out.println(d+" "+denom+" "+answer);
			answer = (double)Math.round(answer*1000000)/(double)1000000;
			System.out.printf("%.6f\n",answer);
		}
	}
	static double probability(String s){
		double probl=1;
		ArrayList<Integer> nums = new ArrayList<Integer>();
		for (int i=0;i<s.length();i++){
			if (Character.toString(s.charAt(i)).equals("0")){
				probl*=(1-prob[i]);
				
			}
			else{
				probl*=(prob[i]);
				nums.add(i);
			}
		}
		for (int i:nums){
			probbuying[i]+=probl;
		}
		return probl;
	}
//	static HashSet<String> combo (int n){
//		HashSet <String> combos=new HashSet<String>();
//		if (n==1){
//			for(int i=0;i<nfriends;i++){
//				probbuying[i]++;
//				combos.add(i+"");
//				
//			}
//			return combos;
//		}
//		else{
//			HashSet<String>com = combo(n-1);
//			for(String s:com){
//				System.out.println(s);
//				for(int i =0;i<nfriends;i++){
//					if (!s.contains(i+"")){
//						combos.add(s+i);
//					}
//				}
//			}
//			return combos;
//		}
//	}
	static HashSet<String> perm (int n,int r){
		HashSet<String> p = new HashSet<String>();
		if(n==1){
			if (r>0){
				p.add(1+"");
//				System.out.println("1");
				probseq.add(prob[0]);
			}
			else{
				p.add(0+"");
//				System.out.println("0");
				probseq.add(1-prob[0]);
			}
			return p;
		}
		else{
			HashSet<String> temp=new HashSet<String>();
			HashSet<String> temp2=new HashSet<String>();
			if(r>0&&n>r){
	//			System.out.println((n-1)+"************ "+r);
				temp=perm(n-1,r);
	//			System.out.println((n-1)+"************ "+(r-1));
				temp2=perm(n-1,r-1);
			}
			else if(r>0&&n==r){
	//			System.out.println((n-1)+"***oooo********* "+(r-1));
				temp2=perm(n-1,r-1);
			}
			else{
	//			System.out.println((n-1)+"*******dfdf***** "+r);
				temp=perm(n-1,r);
			}
			int ct = 0;
			for (String s:temp){
				p.add(s+"0");
				probseq.set(ct, probseq.get(ct)*(1-prob[n-1]));
		//		System.out.println(s+0);
				ct++;
			}
			ct=0;
			for (String s:temp2){
				p.add(s+"1");	
				probseq.set(ct, probseq.get(ct)*(prob[n-1]));
	//			System.out.println(s+1);
				ct++;
			}
 			return p;
		}
	}
}
