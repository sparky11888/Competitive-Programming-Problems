import java.awt.geom.Line2D;
import java.io.*;
import java.util.*;

public class Main {
	static ArrayList<Point> pairs;
	static int mindis;
	public static void main (String[] args){
		Scanner input = new Scanner (System.in);
		while(input.hasNextInt()){
			int numpoint = input.nextInt();
			pairs=new ArrayList<Point>();
			mindis=1000001;
			for(int i=0;i<numpoint;i++){
				int x,y;
				x=input.nextInt();
				y=input.nextInt();
				Point p = new Point(x,y);
				pairs.add(p);
			}
			
			Collections.sort(pairs);
//			for (Point p:pairs){
//				System.out.println(p.x+" "+p.y);
//			}
			System.out.println(process(0,pairs.size()-1));
		}
	}
	static int process(int s,int e ){
		if (0==e-s)
			return 1000001;
		else if (1==e-s){
			Point p1 =pairs.get(s);
			Point p2 = pairs.get(e);
			return p1.distance(p2);
		}
		else{
			int d1,d2,d3=1000001;
			int divide=s+((e-s+1)/2);
			d1=process(s,divide-1);
			d2=process(divide,e);
			int ans =Math.min(d1, d2);
			for(int i=s;i<=divide-1;i++){
				for(int j = divide;j<=e;j++){
					Point p1=pairs.get(i);
					Point p2=pairs.get(j);
					if (Math.abs(p1.x-p2.x)<=ans&&Math.abs(p1.y-p2.y)<=ans*2){
						d3=Math.min(p1.distance(p2), d3);
					}
					else{
						break;
					}
				}
			}
			return Math.min(d3, ans);
		}
	}
}
class Point implements Comparable<Point>{
	int x,y;
	public Point(int xcoo,int ycoo){
		x=xcoo;
		y=ycoo;
	}
	public int distance(Point p2){
		if (this.x==p2.x&&this.y==p2.y)
			return 1000001;
		else if (this.x==p2.x)
			return Math.abs(this.y-p2.y);
		else if (this.y==p2.y)
			return Math.abs(this.x-p2.x);
		else
			return Math.max(Math.abs(this.x-p2.x), Math.abs(this.y-p2.y));
		
	//	return Math.floorMath.sqrt(Math.pow((this.x-p2.x),2)+Math.pow(this.y-p2.y, 2));
	}

	@Override
	public int compareTo(Point p){
		
		if (p.x<this.x)
			return 1;
		else if (p.x>this.x)
			return -1;
		else{
			if (p.y<this.y)
				return 1;
			else if (p.y>this.y)
				return -1;
			else
				return 0;
		}
	}
}
